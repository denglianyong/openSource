# this config is created through command
# mixgen adapter -c $GOPATH/src/istio.io/istio/mixer/adapter/denier/config/config.proto_descriptor -o $GOPATH/src/istio.io/istio/mixer/adapter/denier/config -n denier -t checknothing -t listentry -t quota
apiVersion: "config.istio.io/v1alpha2"
kind: adapter
metadata:
  name: denier
  namespace: istio-system
spec:
  description: 
  session_based: true
  templates:
  - checknothing
  - listentry
  - quota
  config: 
---
